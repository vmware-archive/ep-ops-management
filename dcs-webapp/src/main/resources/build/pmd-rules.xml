<?xml version="1.0"?>
<ruleset name="Custom ruleset" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>EPOPS web-app PMD rules</description>

    <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop" />
    <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
    <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators" />
    <rule ref="rulesets/java/basic.xml/AvoidThreadGroup" />
    <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues" />
    <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation" />
    <rule ref="rulesets/java/basic.xml/BooleanInstantiation" />
    <rule ref="rulesets/java/basic.xml/BrokenNullCheck" />
    <rule ref="rulesets/java/basic.xml/CheckResultSet" />
    <rule ref="rulesets/java/basic.xml/CheckSkipResult" />
    <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray" />
    <rule ref="rulesets/java/basic.xml/DontCallThreadRun" />
    <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices" />
    <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking" />
    <rule ref="rulesets/java/basic.xml/ExtendsObject" />
    <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop" />
    <rule ref="rulesets/java/basic.xml/JumbledIncrementer" />
    <rule ref="rulesets/java/basic.xml/MisplacedNullCheck" />
    <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode" />
    <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock" />
    <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement" />
    <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces" />
    <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces" />
    <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces" />
    <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces" />
    <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
        <properties>
            <property name="reportLevel" value="11"></property>
        </properties>
    </rule>
    <rule ref="rulesets/java/codesize.xml/ExcessiveClassLength" />
    <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="150"></property>
        </properties>
    </rule>
    <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList" />
    <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount" />
    <rule ref="rulesets/java/codesize.xml/NcssConstructorCount" />
    <rule ref="rulesets/java/codesize.xml/NcssMethodCount" />
    <rule ref="rulesets/java/codesize.xml/NcssTypeCount" />
    <rule ref="rulesets/java/codesize.xml/NPathComplexity" />
    <rule ref="rulesets/java/codesize.xml/TooManyFields" />
    <!-- leave to checkstyle <rule ref="rulesets/java/comments.xml/CommentSize" /> -->
    <rule ref="rulesets/java/controversial.xml/AssignmentInOperand" />
    <!-- disabling as this has a problem with a parameter named inProgressTimestamp -->
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"
        /> -->
    <!-- disabling as this has a problem with a parameter named outOfTheBox -->
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters"
        /> -->
    <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode" />
    <!-- All but the UR type do not signify a bug <rule ref="rulesets/java/controversial.xml/DataflowAnomalyAnalysis"
        /> -->
    <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly" />
    <rule ref="rulesets/java/controversial.xml/DontImportSun" />
    <rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine" />
    <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape" />
    <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor" />
    <!-- <rule ref="rulesets/java/controversial.xml/UseConcurrentHashMap" /> -->
    <!-- this rule is already covered by ExcessiveParameterList rule ref="rulesets/java/controversial.xml/UseObjectForClearerAPI"
        / -->
    <rule ref="rulesets/java/coupling.xml/LooseCoupling" />
    <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic" />
    <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause" />
    <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass" />
    <rule ref="rulesets/java/design.xml/BadComparison" />
    <rule
        ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
    <!-- <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"
        /> -->
    <rule ref="rulesets/java/design.xml/EqualsNull" />
    <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass" />
    <!--<rule ref="rulesets/java/design.xml/GodClass" /> -->
    <rule ref="rulesets/java/design.xml/IdempotentOperations" />
    <rule ref="rulesets/java/design.xml/ImmutableField" />
    <rule ref="rulesets/java/design.xml/InstantiationToGetClass" />
    <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass" />
    <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton" />
    <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons" />
    <rule ref="rulesets/java/design.xml/PreserveStackTrace" />
    <rule ref="rulesets/java/design.xml/SimplifyConditional" />
    <!-- returns false positives for DAO objects -->
    <!-- <rule ref="rulesets/java/design.xml/SingularField" /> -->
    <!-- <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement" /> -->
    <rule ref="rulesets/java/design.xml/UncommentedEmptyMethod" />
    <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter" />
    <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty" />
    <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions" />
    <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop" />
    <!-- covered by checkstyle empty block check -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyCatchBlock" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyIfStmt" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyInitializer" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyStatementBlock" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptySwitchStatements" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyTryBlock" /> -->
    <!-- <rule ref="rulesets/java/empty.xml/EmptyWhileStmt" /> -->
    <rule ref="rulesets/java/imports.xml/DontImportJavaLang" />
    <rule ref="rulesets/java/imports.xml/DuplicateImports" />
    <rule ref="rulesets/java/imports.xml/ImportFromSamePackage" />
    <rule ref="rulesets/java/imports.xml/TooManyStaticImports">
        <properties>
            <property name="maximumStaticImports" value="6"></property>
        </properties>
    </rule>
    <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName" />
    <rule ref="rulesets/java/imports.xml/UnusedImports" />
    <!-- many occurences, not harmful anyway -->
    <!-- <rule ref="rulesets/java/javabeans.xml/BeanMembersShouldSerialize" /> -->
    <!-- <rule ref="rulesets/java/javabeans.xml/MissingSerialVersionUID" /> -->
    <rule ref="rulesets/java/junit.xml/JUnitStaticSuite" />
    <rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion" />
    <!-- the rule doesn't consider annotations when checking for test cases -->
    <!-- <rule ref="rulesets/java/junit.xml/TestClassWithoutTestCases" /> -->

    <rule ref="rulesets/java/junit.xml/UnnecessaryBooleanAssertion" />
    <rule ref="rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue" />
    <rule ref="rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue" />
    <rule ref="rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue" />
    <rule ref="rulesets/java/junit.xml/UseAssertTrueInsteadOfAssertEquals" />
    <rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger" />
    <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace" />
    <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal" />
    <rule ref="rulesets/java/logging-java.xml/SystemPrintln" />
    <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier" />
    <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier" />
    <rule ref="rulesets/java/migrating.xml/ByteInstantiation" />
    <rule ref="rulesets/java/migrating.xml/IntegerInstantiation" />
    <rule ref="rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation" />
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation" />
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation" />
    <rule ref="rulesets/java/migrating.xml/JUnitUseExpected" />
    <rule ref="rulesets/java/migrating.xml/LongInstantiation" />
    <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator" />
    <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap" />
    <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList" />
    <rule ref="rulesets/java/migrating.xml/ShortInstantiation" />
    <rule ref="rulesets/java/naming.xml/AvoidDollarSigns" />
    <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass" />
    <rule ref="rulesets/java/naming.xml/ShortMethodName" />
    <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName" />
    <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable" />
    <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation" />
    <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException" />
    <rule
        ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException" />
    <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError" />
    <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally" />
    <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl" />
    <!-- <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar" /> -->
    <rule ref="rulesets/java/strings.xml/AvoidStringBufferField" />
    <!-- sometimes desired for code readability -->
    <!-- <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends" /> -->
    <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck" />
    <rule ref="rulesets/java/strings.xml/InefficientStringBuffering" />
    <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar" />
    <rule ref="rulesets/java/strings.xml/StringInstantiation" />
    <rule ref="rulesets/java/strings.xml/StringToString" />
    <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange" />
    <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings" />
    <rule ref="rulesets/java/strings.xml/UseIndexOfChar" />
    <rule ref="rulesets/java/strings.xml/UselessStringValueOf" />
    <rule ref="rulesets/java/strings.xml/UseStringBufferLength" />
    <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly" />
    <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray" />
    <rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable" />
    <rule ref="rulesets/java/typeresolution.xml/LooseCoupling" />
    <rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException">
        <properties>
            <property name="IgnoreJUnitCompletely" value="true"></property>
        </properties>
    </rule>
    <rule ref="rulesets/java/typeresolution.xml/UnusedImports" />
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary" />
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier" />
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn" />
    <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals" />
    <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable" />
    <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod" />
    <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter" />
    <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable" />
    <!-- many occurences, not harmful anyway <rule ref="rulesets/java/unusedcode.xml/UnusedModifier"
        /> -->
    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField" />
    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod" />
</ruleset>

